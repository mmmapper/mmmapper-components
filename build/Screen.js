import{S as t,i as n,s as a,P as s,c as e,m as o,t as r,a as c,d as l,b as u,e as $,f as i,g as d,h as m,j as p,k as g,l as f}from"./main2.js";import{C as h,S as v}from"./randomColor.js";function q(t){let n,a;return n=new v({props:{canvas:t[0],width:"600",height:"400",editMode:!0}}),{c(){e(n.$$.fragment)},m(t,s){o(n,t,s),a=!0},p(t,a){const s={};1&a&&(s.canvas=t[0]),n.$set(s)},i(t){a||(r(n.$$.fragment,t),a=!0)},o(t){c(n.$$.fragment,t),a=!1},d(t){l(n,t)}}}function w(t){let n,a,s,v,w,x,S;function C(n){t[1].call(null,n)}let b={width:"600",height:"400",class:"border shadow mx-auto",$$slots:{default:[q]},$$scope:{ctx:t}};return void 0!==t[0]&&(b.canvas=t[0]),s=new h({props:b}),u.push((()=>$(s,"canvas",C))),{c(){n=i("h1"),n.textContent="Screen",a=d(),e(s.$$.fragment),w=d(),x=i("pre"),m(x,"class","language-null")},m(t,e){p(t,n,e),p(t,a,e),o(s,t,e),p(t,w,e),p(t,x,e),x.innerHTML='<code class="language-null">&lt;script&gt;\n  import &#123; Canvas, Screen, SketchWrapper &#125; from &#39;@mmmapper/components&#39;;\n\n  let canvas;\n&lt;/script&gt;\n\n&lt;Canvas\n  bind:canvas=&#123;canvas&#125;\n  width=&quot;600&quot;\n  height=&quot;400&quot;\n  class=&quot;border shadow mx-auto&quot;\n&gt;\n  &lt;Screen canvas=&#123;canvas&#125; width=&quot;600&quot; height=&quot;400&quot; editMode=&#123;true&#125;&gt;&lt;/Screen&gt;\n&lt;/Canvas&gt;</code>',S=!0},p(t,n){const a={};5&n&&(a.$$scope={dirty:n,ctx:t}),!v&&1&n&&(v=!0,a.canvas=t[0],g((()=>v=!1))),s.$set(a)},i(t){S||(r(s.$$.fragment,t),S=!0)},o(t){c(s.$$.fragment,t),S=!1},d(t){t&&f(n),t&&f(a),l(s,t),t&&f(w),t&&f(x)}}}function x(t){let n,a;return n=new s({props:{$$slots:{default:[w]},$$scope:{ctx:t}}}),{c(){e(n.$$.fragment)},m(t,s){o(n,t,s),a=!0},p(t,[a]){const s={};5&a&&(s.$$scope={dirty:a,ctx:t}),n.$set(s)},i(t){a||(r(n.$$.fragment,t),a=!0)},o(t){c(n.$$.fragment,t),a=!1},d(t){l(n,t)}}}function S(t,n,a){let s;return[s,function(t){s=t,a(0,s)}]}export default class extends t{constructor(t){super(),n(this,t,S,x,a,{})}}
//# sourceMappingURL=Screen.js.map
