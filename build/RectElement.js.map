{"version":3,"file":"RectElement.js","sources":["../../../src/elements/RectElement.svelte","../../src/pages/elements/RectElement.svx"],"sourcesContent":["<script>\n  import { getContext, onMount } from 'svelte';\n\n  import PIXI, {\n    PIXI_CONTEXT,\n    DragManager,\n    WarpContainer,\n  } from '../lib/pixi/index.js';\n\n  /* Args */\n  export let x = 0,\n    y = 0,\n    offset = [],\n    width,\n    height,\n    fill = 0xffffff,\n    brightness = null,\n    filters = [],\n    scale = 1,\n    position = 'center',\n    lineWidth = null,\n    lineColor = null;\n\n  const { getApp, pixiStore } = getContext(PIXI_CONTEXT);\n  const app = getApp();\n\n  const dragManager = new DragManager();\n\n  function getTransform(position, scale, obj, width, height) {\n    let transform = () => {};\n\n    if (position === 'center') {\n      transform = () => {\n        obj.setTransform(\n          (1 + width - width * scale) / 2,\n          (1 + height - height * scale) / 2,\n          scale,\n          scale,\n        );\n      };\n    } else if (position === 'bottom') {\n      transform = () => {\n        obj.setTransform(0, height - height * scale, 1, scale);\n      };\n    }\n    return transform;\n  }\n\n  let container,\n    showHelper = false;\n  let rect;\n\n  pixiStore.editMode.subscribe((value) => {\n    showHelper = value;\n    !!container && container.showHelper(value);\n  });\n\n  onMount(() => {\n    console.log('RectElement mounted');\n\n    let bg = new PIXI.Graphics();\n    if (lineWidth) {\n      bg.lineStyle(lineWidth, lineColor);\n      bg.drawRect(0, 0, width, height);\n    }\n\n    rect = new PIXI.Graphics();\n    rect.lineStyle(0);\n    rect.beginFill(fill, 1).drawRect(0, 0, width, height).endFill();\n    rect.filters = filters;\n    bg.addChild(rect);\n\n    container = new WarpContainer(bg, app.renderer, app.screen, showHelper);\n    container.x = x;\n    container.y = y;\n\n    container.setOffset(...offset);\n\n    dragManager.makeDraggable(container.group, container.sprite);\n    app.stage.addChild(container.group);\n\n    const transform = getTransform(position, scale, rect, width, height);\n\n    let r, g, b;\n\n    const update = function () {\n      container.update();\n      transform();\n      if (brightness) {\n        r = Math.ceil((fill >> 16) * brightness);\n        g = Math.ceil(((fill >> 8) & 255) * brightness);\n        b = Math.ceil((fill & 255) * brightness);\n        rect.tint = ((1 << 24) + (r << 16) + (g << 8) + b) & 0xffffff;\n      }\n    };\n\n    app.ticker.add(update);\n\n    pixiStore.destructors.update((current) => [\n      ...current,\n      () => {\n        app.ticker.remove(update, this);\n        console.log('RectElement destroyed');\n      },\n    ]);\n  });\n</script>\n","<script>\n  import { Canvas, Screen, SketchWrapper } from '@mmmapper/components';\n  import { RectElement } from '@mmmapper/components';\n\n  let canvas;\n</script>\n\n# RectElement\n\nA simple rectangle element.\n\n<Canvas\n  bind:canvas={canvas}\n  width=\"600\"\n  height=\"400\"\n  class=\"border shadow mx-auto\"\n>\n  <Screen canvas={canvas} width=\"600\" height=\"400\" editMode={true}>\n    <SketchWrapper>\n      <RectElement\n        x={250}\n        y={150}\n        width={100}\n        height={100}\n        fill={0x60c0b7}\n        brightness={1}\n      />\n    </SketchWrapper>\n  </Screen>\n</Canvas>\n\n```\n<script>\n  import { Canvas, Screen, SketchWrapper } from '@mmmapper/components';\n  import { RectElement } from '@mmmapper/components';\n\n  let canvas;\n</script>\n\n<Canvas\n  bind:canvas={canvas}\n  width=\"600\"\n  height=\"400\"\n  class=\"border shadow mx-auto\"\n>\n  <Screen canvas={canvas} width=\"600\" height=\"400\" editMode={true}>\n    <SketchWrapper>\n      <RectElement\n        x={250}\n        y={150}\n        width={100}\n        height={100}\n        fill={0x60c0b7}\n        brightness={1}\n      />\n    </SketchWrapper>\n  </Screen>\n</Canvas>\n```\n"],"names":["x","y","offset","width","height","fill","brightness","filters","scale","position","lineWidth","lineColor","getApp","pixiStore","getContext","PIXI_CONTEXT","app","dragManager","DragManager","container","rect","showHelper","editMode","subscribe","value","onMount","console","log","bg","PIXI","Graphics","lineStyle","drawRect","beginFill","endFill","addChild","WarpContainer","renderer","screen","setOffset","makeDraggable","group","sprite","stage","transform","obj","setTransform","getTransform","r","g","b","update","Math","ceil","tint","ticker","add","destructors","current","remove","this","ctx","canvas"],"mappings":"4SAUaA,EAAI,QACbC,EAAI,aACJC,eACAC,aACAC,WACAC,EAAO,wBACPC,EAAa,iBACbC,eACAC,EAAQ,eACRC,EAAW,uBACXC,EAAY,mBACZC,EAAY,qBAENC,EAAMC,UAAEA,GAAcC,EAAWC,GACnCC,EAAMJ,IAENK,MAAkBC,MAsBpBC,EAEAC,EADFC,GAAa,SAGfR,EAAUS,SAASC,WAAWC,IAC5BH,EAAaG,EACXL,GAAaA,EAAUE,WAAWG,MAGtCC,QACEC,QAAQC,IAAI,2BAERC,MAASC,EAAKC,SACdpB,IACFkB,EAAGG,UAAUrB,EAAWC,GACxBiB,EAAGI,SAAS,EAAG,EAAG7B,EAAOC,IAG3BgB,MAAWS,EAAKC,SAChBV,EAAKW,UAAU,GACfX,EAAKa,UAAU5B,EAAM,GAAG2B,SAAS,EAAG,EAAG7B,EAAOC,GAAQ8B,UACtDd,EAAKb,QAAUA,EACfqB,EAAGO,SAASf,GAEZD,MAAgBiB,EAAcR,EAAIZ,EAAIqB,SAAUrB,EAAIsB,OAAQjB,GAC5DF,EAAUnB,EAAIA,EACdmB,EAAUlB,EAAIA,EAEdkB,EAAUoB,aAAarC,GAEvBe,EAAYuB,cAAcrB,EAAUsB,MAAOtB,EAAUuB,QACrD1B,EAAI2B,MAAMR,SAAShB,EAAUsB,aAEvBG,WArDcnC,EAAUD,EAAOqC,EAAK1C,EAAOC,OAC7CwC,eAEa,WAAbnC,EACFmC,OACEC,EAAIC,cACD,EAAI3C,EAAQA,EAAQK,GAAS,GAC7B,EAAIJ,EAASA,EAASI,GAAS,EAChCA,EACAA,IAGkB,WAAbC,IACTmC,OACEC,EAAIC,aAAa,EAAG1C,EAASA,EAASI,EAAO,EAAGA,KAG7CoC,EAoCWG,CAAatC,EAAUD,EAAOY,EAAMjB,EAAOC,OAEzD4C,EAAGC,EAAGC,QAEJC,aACJhC,EAAUgC,SACVP,IACItC,IACF0C,EAAII,KAAKC,MAAMhD,GAAQ,IAAMC,GAC7B2C,EAAIG,KAAKC,MAAOhD,GAAQ,EAAK,KAAOC,GACpC4C,EAAIE,KAAKC,MAAa,IAAPhD,GAAcC,GAC7Bc,EAAKkC,MAAS,GAAK,KAAON,GAAK,KAAOC,GAAK,GAAKC,EAAK,WAIzDlC,EAAIuC,OAAOC,IAAIL,GAEftC,EAAU4C,YAAYN,QAAQO,OACzBA,OAED1C,EAAIuC,OAAOI,OAAOR,EAAQS,MAC1BlC,QAAQC,IAAI,0oBClFT,MACA,UACI,WACC,SACF,mBACM,ycARFkC,wCAA2C,yHAA3CA,0TALHA,gBAAAA,gsCAAAA,scAPTC,uBAOSA"}