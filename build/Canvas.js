
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, p as create_slot, u as update_slot, t as transition_in, e as transition_out, g as element, h as space, q as empty, k as attr_dev, j as add_location, l as insert_dev, r as group_outros, w as check_outros, o as detach_dev, b as binding_callbacks } from './main2.js';

/* ../src/Canvas.svelte generated by Svelte v3.31.0 */

const file = "../src/Canvas.svelte";

// (11:0) {#if canvas}
function create_if_block(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(11:0) {#if canvas}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let canvas_1;
	let t;
	let if_block_anchor;
	let current;
	let if_block = /*canvas*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			canvas_1 = element("canvas");
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(canvas_1, "width", /*width*/ ctx[1]);
			attr_dev(canvas_1, "height", /*height*/ ctx[2]);
			attr_dev(canvas_1, "class", /*className*/ ctx[4]);
			attr_dev(canvas_1, "style", /*style*/ ctx[3]);
			add_location(canvas_1, file, 9, 0, 184);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[7](canvas_1);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*width*/ 2) {
				attr_dev(canvas_1, "width", /*width*/ ctx[1]);
			}

			if (!current || dirty & /*height*/ 4) {
				attr_dev(canvas_1, "height", /*height*/ ctx[2]);
			}

			if (!current || dirty & /*className*/ 16) {
				attr_dev(canvas_1, "class", /*className*/ ctx[4]);
			}

			if (!current || dirty & /*style*/ 8) {
				attr_dev(canvas_1, "style", /*style*/ ctx[3]);
			}

			if (/*canvas*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*canvas*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(canvas_1);
			/*canvas_1_binding*/ ctx[7](null);
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Canvas", slots, ['default']);
	let { width } = $$props, { height } = $$props;
	let { style = "" } = $$props;
	let { class: className = "" } = $$props;
	let { canvas = null } = $$props; // DOM element
	const writable_props = ["width", "height", "style", "class", "canvas"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Canvas> was created with unknown prop '${key}'`);
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("style" in $$props) $$invalidate(3, style = $$props.style);
		if ("class" in $$props) $$invalidate(4, className = $$props.class);
		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ width, height, style, className, canvas });

	$$self.$inject_state = $$props => {
		if ("width" in $$props) $$invalidate(1, width = $$props.width);
		if ("height" in $$props) $$invalidate(2, height = $$props.height);
		if ("style" in $$props) $$invalidate(3, style = $$props.style);
		if ("className" in $$props) $$invalidate(4, className = $$props.className);
		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [canvas, width, height, style, className, $$scope, slots, canvas_1_binding];
}

class Canvas extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			width: 1,
			height: 2,
			style: 3,
			class: 4,
			canvas: 0
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Canvas",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*width*/ ctx[1] === undefined && !("width" in props)) {
			console.warn("<Canvas> was created without expected prop 'width'");
		}

		if (/*height*/ ctx[2] === undefined && !("height" in props)) {
			console.warn("<Canvas> was created without expected prop 'height'");
		}
	}

	get width() {
		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get style() {
		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get canvas() {
		throw new Error("<Canvas>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set canvas(value) {
		throw new Error("<Canvas>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Canvas as C };
//# sourceMappingURL=Canvas.js.map
